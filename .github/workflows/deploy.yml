name: Deploy Flask App to AWS Lambda

on:
  push:
    branches:
      - main
      - dev
      - staging
  repository_dispatch:
    types: [deploy-staging]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set branch name
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "BRANCH=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          else
            echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          fi

      - name: Create directory structure
        run: mkdir -p package

      - name: Copy application files to package
        run: |
          cp -r $(ls | grep -v 'package' | grep -v '.git') package/

      - name: Install zip command
        uses: montudor/action-zip@v1

      - name: Create zip for Lambda function
        run: |
          cd package
          zip -r ../code.zip .

      - name: Upload Lambda function code
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: "lambda update-function-code \
            --function-name arn:aws:lambda:us-east-2:967549389290:function:seng3011_dataRetrieval \
            --zip-file fileb://code.zip"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"

      - name: Create Lambda Layer
        run: |
          mkdir -p python/lib/python3.12/site-packages
          pip install -r requirements.txt -t python/lib/python3.12/site-packages
          zip -r lambda-layer.zip python
        shell: bash

      - name: Deploy Lambda Layer and attach to function
        run: |
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name my-dependencies-layer \
            --description "Dependencies for Flask API" \
            --zip-file fileb://lambda-layer.zip \
            --compatible-runtimes python3.12 \
            --output text --query 'LayerVersionArn')

          aws lambda update-function-configuration \
            --function-name seng3011_dataRetrieval \
            --layers $LAYER_VERSION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"

      - name: Wait for function update to complete
        run: |
          aws lambda wait function-updated \
            --function-name seng3011_dataRetrieval
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"

      - name: Publish Lambda version
        id: publish
        run: |
          VERSION=$(aws lambda publish-version \
            --function-name seng3011_dataRetrieval \
            --output text --query 'Version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"

      - name: Create or update Lambda alias
        run: |
          ALIAS_NAME=$([[ "${BRANCH}" == "main" ]] && echo "prod" || ([[ "${BRANCH}" == "staging" ]] && echo "staging" || echo "dev"))
          echo "Setting alias to $ALIAS_NAME -> version $VERSION"

          if aws lambda get-alias --function-name seng3011_dataRetrieval --name $ALIAS_NAME > /dev/null 2>&1; then
            aws lambda update-alias \
              --function-name seng3011_dataRetrieval \
              --name $ALIAS_NAME \
              --function-version $VERSION
          else
            aws lambda create-alias \
              --function-name seng3011_dataRetrieval \
              --name $ALIAS_NAME \
              --function-version $VERSION
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"
          VERSION: ${{ env.VERSION }}
          BRANCH: ${{ env.BRANCH }}